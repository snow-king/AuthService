// Code generated by mockery v2.25.0. DO NOT EDIT.

package moks

import (
	models "AuthService/app/models"

	mock "github.com/stretchr/testify/mock"
)

// MockIUserRepository is an autogenerated mock type for the IUserRepository type
type MockIUserRepository struct {
	mock.Mock
}

type MockIUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserRepository) EXPECT() *MockIUserRepository_Expecter {
	return &MockIUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: userAuth
func (_m *MockIUserRepository) Create(userAuth models.LoginUser) (models.User, error) {
	ret := _m.Called(userAuth)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.LoginUser) (models.User, error)); ok {
		return rf(userAuth)
	}
	if rf, ok := ret.Get(0).(func(models.LoginUser) models.User); ok {
		r0 = rf(userAuth)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.LoginUser) error); ok {
		r1 = rf(userAuth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - userAuth models.LoginUser
func (_e *MockIUserRepository_Expecter) Create(userAuth interface{}) *MockIUserRepository_Create_Call {
	return &MockIUserRepository_Create_Call{Call: _e.mock.On("Create", userAuth)}
}

func (_c *MockIUserRepository_Create_Call) Run(run func(userAuth models.LoginUser)) *MockIUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.LoginUser))
	})
	return _c
}

func (_c *MockIUserRepository_Create_Call) Return(_a0 models.User, _a1 error) *MockIUserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserRepository_Create_Call) RunAndReturn(run func(models.LoginUser) (models.User, error)) *MockIUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: userAuth
func (_m *MockIUserRepository) Get(userAuth models.LoginUser) (models.User, error) {
	ret := _m.Called(userAuth)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.LoginUser) (models.User, error)); ok {
		return rf(userAuth)
	}
	if rf, ok := ret.Get(0).(func(models.LoginUser) models.User); ok {
		r0 = rf(userAuth)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.LoginUser) error); ok {
		r1 = rf(userAuth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIUserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - userAuth models.LoginUser
func (_e *MockIUserRepository_Expecter) Get(userAuth interface{}) *MockIUserRepository_Get_Call {
	return &MockIUserRepository_Get_Call{Call: _e.mock.On("Get", userAuth)}
}

func (_c *MockIUserRepository_Get_Call) Run(run func(userAuth models.LoginUser)) *MockIUserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.LoginUser))
	})
	return _c
}

func (_c *MockIUserRepository_Get_Call) Return(_a0 models.User, _a1 error) *MockIUserRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserRepository_Get_Call) RunAndReturn(run func(models.LoginUser) (models.User, error)) *MockIUserRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: user
func (_m *MockIUserRepository) GetRoles(user models.User) []string {
	ret := _m.Called(user)

	var r0 []string
	if rf, ok := ret.Get(0).(func(models.User) []string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockIUserRepository_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type MockIUserRepository_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - user models.User
func (_e *MockIUserRepository_Expecter) GetRoles(user interface{}) *MockIUserRepository_GetRoles_Call {
	return &MockIUserRepository_GetRoles_Call{Call: _e.mock.On("GetRoles", user)}
}

func (_c *MockIUserRepository_GetRoles_Call) Run(run func(user models.User)) *MockIUserRepository_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockIUserRepository_GetRoles_Call) Return(_a0 []string) *MockIUserRepository_GetRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserRepository_GetRoles_Call) RunAndReturn(run func(models.User) []string) *MockIUserRepository_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockIUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIUserRepository creates a new instance of MockIUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIUserRepository(t mockConstructorTestingTNewMockIUserRepository) *MockIUserRepository {
	mock := &MockIUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
